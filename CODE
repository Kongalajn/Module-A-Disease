# SIR model
# Use these <- to make comments Python ignores

# import
import scipy.integrate as spi
import numpy as np
import pylab as pl

#Rates
InfRate=0.9 #Odds of someone infecting someone else beta
RecRate=0.1 #Recovery rate constant alpha
VacRate=0.3 #gamma immunization rate
Contacts=5 #Theta contacts per time unit
Prob=Contacts*InfRate #Probability of transfer

#Population Constants
PopSt=952058 #Stockholm
PopGo=572779 #Gothenburg
PopMa=341457 #Malmö
PopCo=775033 #Copenhagen
PopAa=273077 #Aarhus
PopHa=1822445 #Hamburg
PopTot=PopSt+PopGo+PopMa+PopCo+PopAa+PopHa

#Starting populations
# for malmö
Inf0=1
Rec0=0
Sus0=PopMa-Inf0-Rec0

Y0=[Inf0, Sus0, Rec0]

T=np.linspace(0,100,100) #T axis

def rhs(Y,t,InfRate,RecRate,VacRate) #define the right-hand side of the ODE

  Sus=Y[0]
  Inf=Y[1]
  Rec=Y[2]

  dS=-Prob*Sus*Inf/PopMa-VacRate*Sus
  dI=Prob*Sus*Inf/PopMa-RecRate*Inf
  dR=VacRate*Sus+RecRate*Inf

  dY=[dS, dI, dR]

  return dY

#integration
Result=spi.solve_ivp(rhs, T, Y0) #default method=RK45

Sus=Result[:, 0]
Inf=Result[:, 1]
Rec=Result[:, 2]


pylab.figure()
pylab.plot( T, Sus/PopMa,
            T, I/PopMa,
            T, R/PopMa)
         
pylab.xlabel('Time')
pylab.ylabel('Proportion')

pylab.legend([ 'Susceptible', 'Infective', 'Recovered' ])

pylab.show()




